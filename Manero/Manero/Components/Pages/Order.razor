@page "/order"
@using Manero.Components.Models
@inject HttpClient Http
@inject Manero.Services.ProductService ProductService
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="d-flex flex-column align-items-center">
        @foreach (var item in orderItems)
        {
            <div class="order-item mb-3 p-3 border w-75">
                <div class="row">
                    <div class="col-4 d-flex justify-content-center align-items-center img-container">
                        <img src="images/ProductPlaceholder.svg" alt="Product image" class="img-fluid img-square">
                    </div>
                    <div class="col-8">
                        <h4 class="h5">@item.Name</h4>
                        <p class="small">Price: @item.Price.ToString("C")</p>
                        <p class="small">Size: @item.Size</p>
                        <p class="small">Color: @item.Color</p>
                        <div class="d-flex align-items-center">
                            <button class="btn btn-outline-secondary btn-circle me-2" @onclick="() => UpdateQuantity(item, item.Quantity + 1)">+</button>
                            <span class="quantity-number me-2">@item.Quantity</span>
                            <button class="btn btn-outline-secondary btn-circle" @onclick="() => UpdateQuantity(item, item.Quantity - 1)">-</button>
                            <button class="btn btn-outline-danger ms-2" @onclick="() => RemoveItem(item.OrderItemId)">Remove</button>
                        </div>
                    </div>
                </div>
            </div>
        }
        <div class="col-12 text-center mt-3">
            <button class="btn btn-primary btn-half" @onclick="NavigateToCheckout">Proceed to Checkout</button>
        </div>
    </div>
</div>


@code {
    private List<OrderItem> orderItems = new List<OrderItem>();

    protected override async Task OnInitializedAsync()
    {
        var orderId = 1; // Replace with actual orderId
        orderItems = await ProductService.GetOrderItemsAsync(orderId);
    }

    private async Task UpdateQuantity(OrderItem item, int newQuantity)
    {
        if (newQuantity < 1)
        {
            await RemoveItem(item.OrderItemId);
        }
        else
        {
            item.Quantity = newQuantity;
            await ProductService.UpdateOrderItemAsync(item);
            var orderId = 1; // Replace with actual orderId
            orderItems = await ProductService.GetOrderItemsAsync(orderId);
        }
    }

    private async Task RemoveItem(int orderItemId)
    {
        await ProductService.RemoveOrderItemAsync(orderItemId);
        var orderId = 1; // Replace with actual orderId
        orderItems = await ProductService.GetOrderItemsAsync(orderId);
    }

    private void NavigateToCheckout()
    {
        NavigationManager.NavigateTo("/checkout");
    }
}