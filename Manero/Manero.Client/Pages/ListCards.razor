@page "/list-cards"
@rendermode InteractiveAuto
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager


@using Manero.Client.Models
@using System.Text.Json
@using System.Net.Http;
@using System.Text;



@code {
    List<CardInteractive> cards = new List<CardInteractive>();
    List<CardFormModel> cardsRetrieved = new List<CardFormModel>();

    private DotNetObjectReference<ListCards>? dotNetHelper;

    bool DeletionShow = true;

    int activeCard = 1; //set to first got card

    bool swiperActive;

    private bool firstRender = true;

    [JSInvokable("GetScreenSize")]
    public async Task GetScreenSize() {
        var screenSize = await JSRuntime.InvokeAsync<int>("getScreenWidth");
        swiperActive = screenSize < 420;
        StateHasChanged();
    }

    public void Dispose() {
        dotNetHelper?.Dispose();
    }

    void GoToAddCardPage() {
        NavigationManager.NavigateTo("/add-card");
    }

    void GoToProfilePage() {
        NavigationManager.NavigateTo("/ProfileMenu");
    }

    void HighlightCard(int id) {
        activeCard = id;
        StateHasChanged();
    }

    private void MapCardModelToInteractive(List<CardFormModel> cardmodels) {
        cardmodels.ForEach(cm => cards.Add(new CardInteractive
            {
                CardId = (int)cm.CardId,
                CardOwnerId = cm.CardOwnerId,
                CardNumber = cm.CardNumber,
                CardExpDate = cm.CardExpDate,
                CardOwnerName = cm.CardOwnerName,
                CardPin = cm.CardPin,
                RefreshState = 0,
                ShowOptions = false
            }));
    }



    private async Task LoadAllCards() {
        var requestBody = new { id = 1 };
        try {
            var response = await Http.PostAsJsonAsync("/api/cards-get?code=YQBAKnTnWjCp6D8QUgFGIFeQr9KV0FonMq2R0N06OszvAzFu8EBZXw==", requestBody);
            if (response.IsSuccessStatusCode) {
                var result = await response.Content.ReadFromJsonAsync<ApiResponse>();
                cardsRetrieved = result?.Value.ToList();
                if (cardsRetrieved != null) {
                    MapCardModelToInteractive(cardsRetrieved);
                    StateHasChanged();
                } else {
                    Console.WriteLine("No cards available");
                }
            } else {
                Console.WriteLine("Failed to load cards");
            }
        }
        catch (Exception ex) {
            Console.WriteLine($"An error occurred: {ex.Message}");
        }
    }

    public class ApiResponse
    {
        public List<CardFormModel>? Value { get; set; }
    }

    protected override async void OnInitialized() {
        await LoadAllCards();
    }


    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (firstRender) {
            dotNetHelper = DotNetObjectReference.Create(this);
            await JSRuntime.InvokeVoidAsync("Helpers.setDotNetHelper", dotNetHelper);
            await GetScreenSize();
            await JSRuntime.InvokeVoidAsync("initSwiper");
            firstRender = false;
        }
    }

    string ObfuscateCardNumber(string number) {
        return "**** **** **** " + number.Substring(number.Length - 4);
    }

    string RestructureDateString(string date) {
        var split = date.Split("-");
        string year = split[0][^2..];
        return year + split[1];
    }

    void ToggleOptions(int id) {
        var card = cards.FirstOrDefault(c => c.CardId == id);
        if (card != null) {
            card.ShowOptions = !card.ShowOptions;
            StateHasChanged();
            card.RefreshState++;
        }
    }
    private async Task RemoveCard(int id){
        DeletionShow = false;
        var CardToRemove = cards.Find(c => c.CardId == id);
        if (CardToRemove == null){
            DeletionShow = true;
            return;
        }
        try {
            var response = await Http.DeleteAsync($"/api/delete-card/{id}?code=LO9DzogyJ3uqjiFbncAB7l7iGHKLV2mKc3VN4UGtpR__AzFuqGV-VQ%3D%3D");
            if (response.IsSuccessStatusCode) {
                cards.Remove(CardToRemove);
                StateHasChanged();
            }
        } catch (Exception ex) {
            Console.WriteLine($"An error occured: {ex.Message}");
        }
        DeletionShow = true;
    }
}


<PageTitle>Saved Cards</PageTitle>

<div class="wrapper">
    <div class="container" id="card-details-input">
        <div class="page-title">
            <div class="back-arrow" @onclick="GoToProfilePage">
                <p>&lt;</p>
            </div>
            <div class="title-text">
                <p>Your payment methods</p>
            </div>
            <div class="back-arrow spacer">&lt;</div>
        </div>
        <div class="add-new-card-option">
            <p style="-webkit-text-stroke-width: medium">Cards</p>
            <div class="add-new-card-detail">
                <div><p>New card</p></div>
                <div style="margin-left: 2px"><button class="button-options" @onclick="GoToAddCardPage"><img class="button-image" src="https://www.svgrepo.com/show/522230/plus-circle.svg" /></button></div>
            </div>
        </div>
        <div class="swiper-container">
            <div class="swiper-wrapper">
                @foreach (var card in cards) {
                    if (card.CardId == activeCard || swiperActive) {
                        <div class="swiper-slide">
                            <div class="credit-card">
                                <div class="content">
                                    <div class="card-top">
                                        <span class="visa-logo">VISA</span>
                                    </div>
                                    <div class="card-number">@ObfuscateCardNumber(card.CardNumber)</div>
                                    <div class="card-bottom">
                                        <div class="expiry-date">@card.CardExpDate</div>
                                        <div class="card-holder">@card.CardOwnerName</div>
                                    </div>
                                </div>
                            </div>
                        </div>
                    }
                }
            </div>
        </div>

        <div class="card-stats-and-button">
            @foreach (var card in cards) {
                <div @onclick="() => HighlightCard((int)card.CardId!)" class="part-of-csab">
                    <span>@ObfuscateCardNumber(card.CardNumber)</span>
                    <!--span>@RestructureDateString(card.CardExpDate.ToString())</!--span>-->
                    @if (!card.ShowOptions) {
                        <button @onclick="() => ToggleOptions((int)card.CardId!)" class="button-options"><img class="button-image" src="https://cdn-icons-png.freepik.com/512/176/176328.png" /></button>
                    }
                    @if (card.ShowOptions) {
                        <div>
                            @if(DeletionShow){
                                <button class="button-options" @onclick="() => RemoveCard((int)card.CardId)"><img class="button-image" src="https://cdn-icons-png.freepik.com/512/4083/4083831.png" /></button>
                            } else {
                                <button class="button-options" disabled><img class="button-image" src="https://cdn-icons-png.freepik.com/512/4083/4083831.png" /></button>
                            }
                            <button @onclick="() => ToggleOptions((int)card.CardId!)" class="button-options"><img class="button-image" src="https://cdn-icons-png.freepik.com/512/1632/1632708.png" /></button>
                        </div>
                    }
                </div>
            }
            <span></span>
        </div>
    </div>
</div>


