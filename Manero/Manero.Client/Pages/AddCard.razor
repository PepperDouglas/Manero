@page "/add-card"
@rendermode InteractiveAuto
@inject IJSRuntime JSRuntime
@inject HttpClient Http
@inject NavigationManager NavigationManager;

@using Manero.Client.Models
@using System.Text.Json
@using System.Net.Http;
@using System.Text;

@{
    var todaysDate = DateOnly.FromDateTime(DateTime.Now);
    string currentYear = todaysDate.Year.ToString();
    string currentMonth = todaysDate.Month.ToString();
    currentMonth = currentMonth.Length < 2 ? "0" + currentMonth : currentMonth;
    string minimumMonth = $"{currentYear}-{currentMonth}";
}

@code {
    private CardFormModel CardForm = new CardFormModel();

    private string CardHolderName { get; set; } = "";
    private string CardNumber { get; set; } = "";
    private string ExpiryDate { get; set; } = DateTime.Now.ToString("yyyy-MM");

    private string CardHolderNameDisplay { get; set; } = "CARD HOLDER";
    private string CardNumberDisplay { get; set; } = "#### #### #### ####";
    private string ExpiryDateDisplay { get; set; } = DateTime.Now.ToString("MM/yy");

    private bool CardHolderNameHasError { get; set; } = false;
    private bool CardNumberHasError { get; set; } = false;
    private bool CardPinHasError { get; set; } = false;

    private int cardHolderNameKey = 0;
    private int cardNumberKey = 0;
    private int cardPinKey = 0;

    private string CardHolderNameErrorMessage { get; set; } = "";
    private string CardNumberErrorMessage { get; set; } = "";
    private string CardPinErrorMessage { get; set; } = "";

    private void UpdateName(ChangeEventArgs e) {
        var newName = e.Value?.ToString() ?? "";
        if (newName.Length <= 21) {
            CardHolderName = newName;
            CardHolderNameDisplay = string.IsNullOrEmpty(CardHolderName) ? "CARD HOLDER" : CardHolderName;
            CardForm.CardOwnerName = CardHolderName;
        }
    }

    private void GoToCardList() {
        NavigationManager.NavigateTo("/list-cards");
    }

    private void UpdatePin(ChangeEventArgs e) {
        CardForm.CardPin = e.Value?.ToString() ?? "";
    }

    private void UpdateCardNumber(ChangeEventArgs e) {
        CardNumber = e.Value?.ToString() ?? "";
        CardNumberDisplay = FormatCardNumber(CardNumber);
        CardForm.CardNumber = CardNumber;
    }

    private string FormatCardNumber(string number) {
        number = new String(number.Where(Char.IsDigit).ToArray());
        var maskedNumber = number.PadRight(16, '#');
        return $"{maskedNumber.Substring(0, 4)} {maskedNumber.Substring(4, 4)} {maskedNumber.Substring(8, 4)} {maskedNumber.Substring(12, 4)}";
    }

    private void UpdateExpiryDate(ChangeEventArgs e) {
        ExpiryDate = e.Value?.ToString() ?? "";
        if (DateTime.TryParseExact(ExpiryDate, "yyyy-MM", null, System.Globalization.DateTimeStyles.None, out var date)) {
            ExpiryDateDisplay = date.ToString("MM/yy");
            CardForm.CardExpDate = DateOnly.FromDateTime(date.AddMonths(1));
        }
    }

    private async Task LogToBrowser(string message) {
        await JSRuntime.InvokeVoidAsync("console.log", "Button clicked");
    }


    private async Task SaveCardDetails() {

        ResetErrorStates();
        if (ValidateFormData()) {
            //DISABLE BUTTON HERE
            CardForm.CardOwnerId = 1;
            var jsonContent = JsonSerializer.Serialize(CardForm);
            var content = new StringContent(jsonContent, Encoding.UTF8, "application/json");
            try {
                var response = await Http.PostAsync("api/create-card?code=DXi4o7QJEGvMLjHoQmH4C8kaAAlvERu-E7vCyQ5I6nsWAzFupBloZQ==", content);
                if (response.IsSuccessStatusCode) {
                    Console.WriteLine("Data saved successfully!");
                    NavigationManager.NavigateTo("/card-success");
                } else {
                    Console.WriteLine("Failed to save data.");
                    NavigationManager.NavigateTo("/card-failure");
                }
            }
            catch (Exception ex) {
                Console.WriteLine($"An error occurred: {ex.Message}");
            }
        } else {

            UpdateErrorStates();
        }
    }
    private void ResetErrorStates() {
        CardHolderNameHasError = false;
        CardNumberHasError = false;
        CardPinHasError = false;
    }
    private void UpdateErrorStates() {
        if (string.IsNullOrEmpty(CardHolderName) || CardHolderName.Length > 21) {
            CardHolderNameHasError = true;
            cardHolderNameKey++;
        } else {
            CardHolderNameHasError = false;
        }
        if (string.IsNullOrEmpty(CardNumber) || CardNumber.Length != 16) {
            CardNumberHasError = true;
            cardNumberKey++;
        } else {
            CardNumberHasError = false;
        }
        if (string.IsNullOrEmpty(CardForm.CardPin)) {
            CardPinHasError = true;
            cardPinKey++;
        } else {
            CardPinHasError = false;
        }

        StateHasChanged();
    }


    private bool ValidateFormData() {
        bool isValid = true;
        ResetErrorMessages();

        if (string.IsNullOrEmpty(CardForm.CardOwnerName)) {
            CardHolderNameErrorMessage = "Card Holder Name is required and must be less than 22 characters.";
            isValid = false;
        }
        if (string.IsNullOrEmpty(CardForm.CardNumber) || CardForm.CardNumber.Length != 16) {
            CardNumberErrorMessage = "Card Number must be 16 digits.";
            isValid = false;
        }
        if (string.IsNullOrEmpty(CardForm.CardPin)) {
            CardPinErrorMessage = "PIN is required.";
            isValid = false;
        }

        return isValid;
    }
    private void ResetErrorMessages() {
        CardHolderNameErrorMessage = "";
        CardNumberErrorMessage = "";
        CardPinErrorMessage = "";
    }
}

<PageTitle>Add Card</PageTitle>

<div class="wrapper">
    <div class="container" id="card-details-input">
        <div class="page-title">
            <div class="back-arrow" @onclick="GoToCardList">
                <p>&lt;</p>
            </div>
            <div class="title-text">
                <p>Add a new card</p>
            </div>
            <div class="back-arrow spacer">&lt;</div>
        </div>
        <div class="credit-card">
            <div class="content">
                <div class="card-top">
                    <span class="visa-logo">VISA</span>
                </div>
                <div class="card-number">@CardNumberDisplay</div>
                <div class="card-bottom">
                    <div class="expiry-date">@ExpiryDate</div>
                    <div class="card-holder">@CardHolderNameDisplay</div>
                </div>
            </div>
        </div>
        <form id="card-details-form">
            <div>
                <div class="form-group floating-label" id="name-input">
                    <input @key="cardHolderNameKey" class="form-control @(CardHolderNameHasError ? "input-error-shake" : "" )" value="@CardHolderName" @oninput="@((ChangeEventArgs e) => UpdateName(e))" type="text" id="name" maxlength="21" placeholder=" " />
                    <label for="name">Name as on card</label>
                    <span class="error-message">@CardHolderNameErrorMessage</span>
                </div>
                <div class="form-group floating-label" id="number-input">
                    <input @key="cardNumberKey" class="form-control @(CardNumberHasError ? "input-error-shake" : "")" value="@CardNumber" @oninput="@((ChangeEventArgs e) => UpdateCardNumber(e))" type="text" id="number" maxlength="16" placeholder=" " />
                    <label for="number">Card number</label>
                    <span class="error-message">@CardNumberErrorMessage</span>
                </div>
                <div class="form-row">
                    <div class="col-6 form-group floating-label" id="expiration-input">
                        <input class="form-control" @onchange="UpdateExpiryDate" type="month" id="date" min=@minimumMonth value=@minimumMonth />
                        <label for="date">Month/Year</label>
                    </div>
                    <div class="col-6 form-group floating-label" id="pin-input">
                        <input @key="cardPinKey" class="form-control @(CardPinHasError ? "input-error-shake" : "")" @oninput="@((ChangeEventArgs e) => UpdatePin(e))" type="password" id="pin" placeholder=" " />
                        <label for="pin">PIN</label>
                        <span class="error-message">@CardPinErrorMessage</span>
                    </div>
                </div>
            </div>
        </form>
        <button class="btn" id="save-card-button" @onclick="SaveCardDetails">
            SAVE
        </button>
    </div>
</div>


